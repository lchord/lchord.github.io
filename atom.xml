<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lchord</title>
  
  <subtitle>一路走来，甚是艰辛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lchord.com/"/>
  <updated>2018-11-05T15:33:41.668Z</updated>
  <id>https://www.lchord.com/</id>
  
  <author>
    <name>lchord</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Travis CI自动部署（VPS篇）</title>
    <link href="https://www.lchord.com/2018/11/05/vps-travis-rsync/"/>
    <id>https://www.lchord.com/2018/11/05/vps-travis-rsync/</id>
    <published>2018-11-05T00:00:00.000Z</published>
    <updated>2018-11-05T15:33:41.668Z</updated>
    
    <content type="html"><![CDATA[<p>博客换回到VPS上了，由于性能较低，不想用动态博客，而hexo的第一个解决的问题就是部署。最先想到的是利用git，提交到VPS后在通过钩子复制到网站目录。但是，遇到了一些困难，包括钩子不触发和权限问题（太不熟练了）。之后想到了对linux很友好的rsync，hexo也提供了rsync部署插件，但是这要求在<code>_config.yml</code>里写比较复杂的设置，并且出错时不便于在Travis CI里查看。所以，我还是使用了原生的rsync命令直接将文件同步到VPS。</p><p>To be continued…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客换回到VPS上了，由于性能较低，不想用动态博客，而hexo的第一个解决的问题就是部署。最先想到的是利用git，提交到VPS后在通过钩子复制到网站目录。但是，遇到了一些困难，包括钩子不触发和权限问题（太不熟练了）。之后想到了对linux很友好的rsync，hexo也提供了
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.lchord.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://www.lchord.com/tags/hexo/"/>
    
      <category term="Travis CI" scheme="https://www.lchord.com/tags/Travis-CI/"/>
    
      <category term="rsync" scheme="https://www.lchord.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>SSH工具连接Google Cloud Platform</title>
    <link href="https://www.lchord.com/2018/10/31/ssh-in-google-cloud-platform/"/>
    <id>https://www.lchord.com/2018/10/31/ssh-in-google-cloud-platform/</id>
    <published>2018-10-31T00:00:00.000Z</published>
    <updated>2018-11-05T15:33:41.668Z</updated>
    
    <content type="html"><![CDATA[<p>在Google Cloud Platform创建实例后，通过SSH工具连接可以方便在本地操作使用。我用的是Windows下的mobaXterm，其他类似的SSH工具设置都差不多。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>首先在Windows PowerShell里生成使用公钥和私钥</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .ssh # 进入当前用户的.ssh文件夹</span><br><span class="line">ssh-keygen -f gcp-key # 生成密钥文件</span><br><span class="line">Enter passphrase (empty for no passphrase): # 增加密码提高安全性</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in gcp-key. # 私钥存入了gcp-key文件</span><br><span class="line">Your public key has been saved in gcp-key.pub. # 公钥存入了gcp-key.pub文件</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样在当前用户文件夹下的.ssh文件夹中就创建了一对公钥和私钥文件。用编辑器打开gcp-key.pub公钥文件，复制其中的内容备用。</p><h2 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h2><p>进入实例，打开提供的命令行工具。进入用户文件夹下的.ssh文件夹。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>其中有一个名为authorized_keys的文件。内容大致如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Added by Google</span><br><span class="line">ssh-rsa AAAAB3Nza..........</span><br></pre></td></tr></table></figure><p>里面存放的是Google生成的公钥，我们要做的是把我们自己的公钥复制粘贴进去(注意不要更改以前的内容，如果担心操作失误可以提前备份)。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi authorized_keys</span><br><span class="line"></span><br><span class="line"># Added by Google</span><br><span class="line">ssh-rsa AAAAB3Nza.......... # 以前的密钥内容保持不变</span><br><span class="line"></span><br><span class="line"># gcp-key</span><br><span class="line">ssh-rsa .......... # 在以前内容后面粘贴自己公钥文件的内容</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p>另外，操作时可能需要注意权限问题。</p><h2 id="本地使用SSH工具连接"><a href="#本地使用SSH工具连接" class="headerlink" title="本地使用SSH工具连接"></a>本地使用SSH工具连接</h2><p>我使用的是mobaXterm。点击工具栏中的Session -&gt; SSH。在Basic SSH settings中Remote host填写实例的外部ip，这里可以不指定Specify username，端口填写自己的SSH端口，默认22。<br>之后点击下面的Advanced SSH settings，勾选Use private key，输入或者浏览选择之前生成的私钥文件，最后OK确认。<br>左侧单击Sessions，连接时，选择我们刚才设置的ip地址，双击进入。Shell显示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Passphrase for OpenSSH private key: # 输入设置的passphrase</span><br><span class="line">login as: # 输入用户名，注意不是实例名</span><br><span class="line">Authenticating with public key &quot;Imported-Openssh-Key: C:\Users\$&#123;username&#125;\.ssh\gcp-key&quot;</span><br></pre></td></tr></table></figure><p>完成验证后就可以使用Shell远程操作了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Google Cloud Platform创建实例后，通过SSH工具连接可以方便在本地操作使用。我用的是Windows下的mobaXterm，其他类似的SSH工具设置都差不多。&lt;/p&gt;
&lt;h2 id=&quot;本地&quot;&gt;&lt;a href=&quot;#本地&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.lchord.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ssh" scheme="https://www.lchord.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>初雪</title>
    <link href="https://www.lchord.com/2018/01/30/first-snow/"/>
    <id>https://www.lchord.com/2018/01/30/first-snow/</id>
    <published>2018-01-30T00:00:00.000Z</published>
    <updated>2018-11-05T15:33:41.668Z</updated>
    
    <content type="html"><![CDATA[<p>上个星期，上海下了入冬以来的第一场雪。</p><p><img src="https://wx1.sinaimg.cn/mw690/911a69ably1fnylkekorrj21kw16ox6s.jpg" alt="初雪"></p><p><img src="https://wx2.sinaimg.cn/mw690/911a69ably1fnylk0pxsnj21kw16oqv8.jpg" alt="初雪"></p><p>气温太低，还是继续宅着吧。<br>_(:з」∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上个星期，上海下了入冬以来的第一场雪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/911a69ably1fnylkekorrj21kw16ox6s.jpg&quot; alt=&quot;初雪&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
      <category term="日常" scheme="https://www.lchord.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="随手拍" scheme="https://www.lchord.com/tags/%E9%9A%8F%E6%89%8B%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署</title>
    <link href="https://www.lchord.com/2017/12/16/github-travis-test/"/>
    <id>https://www.lchord.com/2017/12/16/github-travis-test/</id>
    <published>2017-12-16T00:00:00.000Z</published>
    <updated>2018-11-05T15:33:41.668Z</updated>
    
    <content type="html"><![CDATA[<p>之前放弃hexo的主要原因就是因为部署的问题，那个时候GitHub还经常抽风。不过现在好多了，加上Travis CI这个工具，再也不用为部署而操心了。</p><p>我使用Travis CI的主要方法是生成public文件夹，然后将其中内容提交到静态页面仓库。之所以不使用原生的<code>hexo g</code>，是因为需要设置SSH才能免密自动提交。但是Travis CI的加密解密让人很困惑，开始我以为是本地Windows系统的原因（使用Windows生成的私钥文件确实不能正常使用），于是我换用Ubuntu，使用其中的<code>ssh-keygen</code>命令生成的密钥也不能正常使用，之后我还在vps上试了试，仍然出错。  </p><p>不过GitHub提供了token，通过在Travis CI内设置变量，避免在公开文件上设置信息，这样就可以直接安全的把public文件夹进行提交了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前放弃hexo的主要原因就是因为部署的问题，那个时候GitHub还经常抽风。不过现在好多了，加上Travis CI这个工具，再也不用为部署而操心了。&lt;/p&gt;
&lt;p&gt;我使用Travis CI的主要方法是生成public文件夹，然后将其中内容提交到静态页面仓库。之所以不使用原
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.lchord.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://www.lchord.com/tags/hexo/"/>
    
      <category term="Travis CI" scheme="https://www.lchord.com/tags/Travis-CI/"/>
    
  </entry>
  
</feed>
